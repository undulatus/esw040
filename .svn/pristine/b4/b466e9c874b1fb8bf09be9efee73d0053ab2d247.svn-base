package com.pointwest.workforce.planner.service.impl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.apache.commons.lang.math.NumberUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import com.pointwest.workforce.planner.constants.WorkbookExceptionConstants;
import com.pointwest.workforce.planner.controller.OpportunityController;
import com.pointwest.workforce.planner.nonentity.domain.OpportunityTnl;
import com.pointwest.workforce.planner.nonentity.domain.Workbook;
import com.pointwest.workforce.planner.service.WorkbookValidationService;
import com.pointwest.workforce.planner.util.DateUtil;

@Service
public class WorkbookValidationServiceImpl implements WorkbookValidationService{

	private static final Logger log = LoggerFactory.getLogger(OpportunityController.class);

	public boolean checkWorkbookForExceptions(Workbook workbook) {

		boolean result = true;
		// CHECK IF REQUIRED COLUMN IS MISSING
		List<String> worksheetColumns = new ArrayList<String>();
		workbook.getOpportunityTnl().get(0).getDataMap()
				.forEach((columnHeader, v) -> worksheetColumns.add(columnHeader));
		List<String> missingColumns = WorkbookExceptionConstants.REQUIRED_COLUMN_LIST.stream()
				.filter(elem -> !worksheetColumns.contains(elem)).collect(Collectors.toList());
		
		//IF REQUIRED COLUMNS ARE PRESENT
		if (missingColumns.size() == 0) {
			log.info("Form validated; Required columns present");
			for (OpportunityTnl entry : workbook.getOpportunityTnl()) {
				for (Map.Entry<String, Object> columnKey : entry.getDataMap().entrySet()) {

					log.info("CHECKING: " + columnKey.getKey());
					
					// SETTING NULL TO EMPTY STRING
					if(columnKey.getValue() == null){
						columnKey.setValue("");
					}

					// CHECK IF REQUIRED FIELD IS EMPTY
					if (WorkbookExceptionConstants.REQUIRED_COLUMN_LIST.contains(columnKey.getKey())
							&& (columnKey.getValue() == null || columnKey.getValue().equals(""))) {
						log.info(WorkbookExceptionConstants.ERROR_MESSAGE_REQUIRED_FIELD_EMPTY);
						log.info("REQUIRED FIELD WITH EMPTY VALUE: " + columnKey.getKey());
						log.info("ROW NUMBER: " + entry.getOpportunityTnlRow());
						result = false;
					}

					// CHARACTER LIMIT
					if (columnKey.getValue().toString().length() > WorkbookExceptionConstants.CHARACTER_LIMIT) {
						log.info(WorkbookExceptionConstants.ERROR_MESSAGE_CHARACTER_LIMIT_EXCEEDED);
						log.info("FIELD WITH EXCEEDING VALUE: " + columnKey.getKey());
						log.info("ROW NUMBER: " + entry.getOpportunityTnlRow());
						result = false;
					}

					// INVALID DATA TYPE DOUBLE
					// IF VALUE IS NOT A NUMERIC
					if (WorkbookExceptionConstants.DOUBLE_DATA_TYPE_COLUMN_LIST.contains(columnKey
							.getKey())
							&& ((!NumberUtils.isNumber(columnKey.getValue().toString()) || (NumberUtils
									.isNumber(columnKey.getValue()
											.toString())
									&& (columnKey.getValue().toString()
											.substring(columnKey.getValue().toString().length() - 1).equalsIgnoreCase(
													WorkbookExceptionConstants.VALID_NUMBER_CHARACTER_CONSTRAINT_1)
											|| columnKey.getValue().toString()
													.substring(columnKey.getValue().toString().length() - 1)
													.equalsIgnoreCase(
															WorkbookExceptionConstants.VALID_NUMBER_CHARACTER_CONSTRAINT_2)))))) {
						log.info(WorkbookExceptionConstants.ERROR_MESSAGE_INVALID_DATA_TYPE
								+ WorkbookExceptionConstants.ERROR_MESSAGE_INVALID_DATA_DOUBLE_EXPECTED);
						log.info("FIELD WITH INVALID DATA FORMAT: " + columnKey.getKey());
						log.info("ROW NUMBER: " + entry.getOpportunityTnlRow());
						result = false;

					// IF VALUE IS A NUMERIC
					} else {
						// DECIMAL PRECISION
						String text = Double.toString(NumberUtils.toDouble(columnKey.getValue().toString()));
						int integerPlaces = text.indexOf('.');
						int decimalPlaces = text.length() - integerPlaces - 1;

						if (decimalPlaces > WorkbookExceptionConstants.MINIMUM_ACCEPTABLE_DECIMAL_PLACES) {
							log.info(WorkbookExceptionConstants.ERROR_MESSAGE_INVALID_NUMERIC_PRECISION);
							log.info("FIELD WITH INVALID PRECISION: " + columnKey.getKey());
							log.info("ROW NUMBER: " + entry.getOpportunityTnlRow());
							result = false;
						}
					}

					// INVALID DATA TYPE DATE
					if (WorkbookExceptionConstants.DATE_DATA_TYPE_COLUMN_LIST.contains(columnKey.getKey())
							&& !DateUtil.checkIfStringIsValidDate(columnKey.getValue().toString(), "MM-d-yyyy")) {
						log.info(WorkbookExceptionConstants.ERROR_MESSAGE_INVALID_DATA_TYPE
								+ WorkbookExceptionConstants.ERROR_MESSAGE_INVALID_DATA_DATE_EXPECTED);
						log.info("FIELD WITH INVALID DATE: " + columnKey.getKey());
						log.info("ROW NUMBER: " + entry.getOpportunityTnlRow());
						result = false;
					}

					// VALUE NOT IN PREDEFINEDLIST
					if (WorkbookExceptionConstants.PREDEFINED_COLUMN_LIST.contains(columnKey.getKey())) {
						switch (columnKey.getKey()) {
						case WorkbookExceptionConstants.COLUMN_2:
							if (!WorkbookExceptionConstants.BUSINESS_UNIT_PREDEFINED_LIST
									.contains(columnKey.getValue())) {
								log.info(WorkbookExceptionConstants.ERROR_MESSAGE_VALUE_NOT_IN_PREDEFINED_LIST);
								log.info("FIELD WITH INVALID VALUE: " + columnKey.getKey());
								log.info("ROW NUMBER: " + entry.getOpportunityTnlRow());
								result = false;
							}
						case WorkbookExceptionConstants.COLUMN_4:
							if (!WorkbookExceptionConstants.PROJECT_ROLE_PREDEFINED_LIST
									.contains(columnKey.getValue())) {
								log.info(WorkbookExceptionConstants.ERROR_MESSAGE_VALUE_NOT_IN_PREDEFINED_LIST);
								log.info("FIELD WITH INVALID VALUE: " + columnKey.getKey());
								log.info("ROW NUMBER: " + entry.getOpportunityTnlRow());
								result = false;
							}
						}

					}

					if(!columnKey.getKey().toString().equalsIgnoreCase(WorkbookExceptionConstants.COLUMN_11)){
						// MULTIPLE ENTRIES IN SINGLE ONLY ENTRY FIELD
						List<String> multipleEntryList = Arrays.asList(columnKey.getValue().toString().split("[,;][ ]*"));
						if (!WorkbookExceptionConstants.MULTIPLE_ENTRY_COLUMN_LIST.contains(columnKey.getKey())
								&& multipleEntryList.size() > 1) {
							log.info(WorkbookExceptionConstants.ERROR_MESSAGE_SINGLE_ENTRY_FIELD_ONLY);
							log.info("FIELD WITH INVALID VALUE: " + columnKey.getKey());
							log.info("ROW NUMBER: " + entry.getOpportunityTnlRow());
							result = false;
						}
					}
				}
			}
			
		//IF A REQUIRED COLUMN IS MISSING
		} else {
			log.info(WorkbookExceptionConstants.ERROR_MESSAGE_REQUIRED_COLUMN_MISSING);
			log.info("MISSING COLUMNS: " + missingColumns);
			result = false;
		}
		return result;
	}
}
