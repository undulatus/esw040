package com.pointwest.workforce.planner.service.impl;

import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.gdata.client.GoogleService;
import com.google.gdata.data.Person;
import com.google.gdata.data.spreadsheet.ListEntry;
import com.google.gdata.data.spreadsheet.ListFeed;
import com.google.gdata.data.spreadsheet.SpreadsheetEntry;
import com.google.gdata.data.spreadsheet.SpreadsheetFeed;
import com.google.gdata.data.spreadsheet.WorksheetEntry;
import com.pointwest.workforce.planner.constants.ESWConstants;
import com.pointwest.workforce.planner.data.OpportunityTnlRawRepository;
import com.pointwest.workforce.planner.data.WorkbookDataSourceRepository;
import com.pointwest.workforce.planner.domain.OpportunityTnlRaw;
import com.pointwest.workforce.planner.domain.WorkbookDataSource;
import com.pointwest.workforce.planner.nonentity.domain.OpportunityTnl;
import com.pointwest.workforce.planner.nonentity.domain.Workbook;
import com.pointwest.workforce.planner.security.GoogleServiceAuthorization;
import com.pointwest.workforce.planner.service.UploadDataService;
import com.pointwest.workforce.planner.util.KeyUtil;


@Service
public class UploadDataServiceImpl implements UploadDataService {
	
	@Autowired
	public WorkbookDataSourceRepository workbookDataSourceRepository;
	
	@Autowired
	OpportunityTnlRawRepository opportunityTnlRawRepository;

	@Autowired
	GoogleServiceAuthorization googleServiceAuthorization;
	
	@Value("${tnl.def.rowNumStart}")
	private long rowNum;
	
	private GoogleService googleService;

	private static final Logger log = LoggerFactory.getLogger(UploadDataServiceImpl.class);

	@Override
	public WorkbookDataSource fetchGBookByUrl(String workbookUrl) {
		WorkbookDataSource workbookDataSource = workbookDataSourceRepository.findByUrl(workbookUrl);
		return workbookDataSource;
	}
	
	@Override
	public List<OpportunityTnlRaw> fetchAllOpportunityTnlRaw() {
		List<OpportunityTnlRaw> opportunitTnlRaws = new ArrayList<OpportunityTnlRaw>();
		opportunityTnlRawRepository.findAll().forEach(opportunitTnlRaws::add);
		return opportunitTnlRaws;
	}
	
	
	@Transactional(rollbackFor=Exception.class)
	@Override
	public List<OpportunityTnlRaw> saveOpportunityTnlRaw(List<OpportunityTnlRaw> opportunityTnlRaws) {
		List<OpportunityTnlRaw> saved = null;
		try {
			saved = (List<OpportunityTnlRaw>) opportunityTnlRawRepository.save(opportunityTnlRaws);
		} catch(Exception e) {
			log.error("Exception in saving opp tnl " + e.getMessage());
			saved = null;
		}
		return saved;
	}

	@Override
	public WorkbookDataSource saveGoogleWorkbook(String workbookUrl) {
		Date date = new Date();
		WorkbookDataSource workbookDataSource = new WorkbookDataSource(workbookUrl, 1 , date, "Google Sheet", SecurityContextHolder.getContext().getAuthentication().getPrincipal().toString());
		
		WorkbookDataSource saved = workbookDataSourceRepository.save(workbookDataSource);
		
		return saved;
	}
	
	@Override
	public void updateEntryAndStartUpload(WorkbookDataSource workbookDataSource) {
		Date date = new Date();
		workbookDataSourceRepository.updateEntryAndStartUpload(workbookDataSource.getWorkbookDataSourceId(), workbookDataSource.getEntry(), date);
	}

	@Override
	public Workbook extractGoogleWorkbook(WorkbookDataSource workbookDataSource) {
		String key = KeyUtil.getKey(workbookDataSource);
		
		Workbook workbook = new Workbook();
		
		try {
			googleService = googleServiceAuthorization.init();
			
		      URL SPREADSHEET_FEED_URL = new URL(ESWConstants.SPREADSHEETS_FEED);

		      SpreadsheetFeed feed = googleService.getFeed(SPREADSHEET_FEED_URL, SpreadsheetFeed.class);
		      List<SpreadsheetEntry> spreadsheets = feed.getEntries();

		      SpreadsheetEntry spreadsheetFile = null;

		      for (SpreadsheetEntry spreadsheet : spreadsheets) {
		        if (spreadsheet.getWorksheetFeedUrl().getPath().contains(key)) 
		        {
		            //get Owner Name
		        	if(workbookDataSource.getOwner() == null && workbookDataSource.getWorkbookDataSourceFileName() == null){
		        		for(Person authors : spreadsheet.getAuthors()){
		        			workbookDataSource.setOwner(authors.getName());
		        		}
		        		workbookDataSource.setWorkbookDataSourceFileName(spreadsheet.getTitle().getPlainText());
		        		workbookDataSourceRepository.saveOwnerFileNameAndBU(workbookDataSource.getWorkbookDataSourceId(), workbookDataSource.getOwner(), workbookDataSource.getWorkbookDataSourceFileName());
		        	}

		        	//get File Name
		          spreadsheetFile = spreadsheet;
		          break;
		        }
		      }

		      // Fetch the list feed of the worksheet
		      WorksheetEntry worksheet = spreadsheetFile.getDefaultWorksheet();


				URL listFeedUrl = worksheet.getListFeedUrl();
				ListFeed listFeed = googleService.getFeed(listFeedUrl, ListFeed.class);
				List<ListEntry> listEntries = listFeed.getEntries();
				// Iterate through each row, printing its cell values


				List<OpportunityTnl> opportunityTnlList = new ArrayList<OpportunityTnl>();

				for (ListEntry row : listEntries) {
					
					OpportunityTnl opportunityTnl = new OpportunityTnl();
					
					Map<String, Object> dataMap = new HashMap<String, Object>();
					
					for (String tag : row.getCustomElements().getTags()) {
						String value = row.getCustomElements().getValue(tag);
						dataMap.put(tag, value);
						
					}
					
					
					opportunityTnl.setOpportunityTnlRow(rowNum);
					opportunityTnl.setDataMap(dataMap);

					opportunityTnlList.add(opportunityTnl);

					rowNum++;
				}

				workbook.setOpportunityTnl(opportunityTnlList);
			}

			catch (IOException e) {
				System.err.println(e.getMessage());
			}

			catch (Exception t) {
				System.out.println("exc");
				t.printStackTrace();
			}
			
			return workbook;
			
		}

	
}
