package com.pointwest.workforce.planner.controller;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.pointwest.workforce.planner.domain.CustomError;
import com.pointwest.workforce.planner.domain.Opportunity;
import com.pointwest.workforce.planner.domain.OpportunityTnlRaw;
import com.pointwest.workforce.planner.domain.WorkbookDataSource;
import com.pointwest.workforce.planner.nonentity.domain.Workbook;
import com.pointwest.workforce.planner.service.MigrationService;
import com.pointwest.workforce.planner.service.OpportunityService;
import com.pointwest.workforce.planner.service.UploadDataService;
import com.pointwest.workforce.planner.ui.adapter.WorkbookAdapter;

@RestController
public class MigrationController {
	
	@Value("${workbook.migration.status.not-migrated}")
	private String migrationStatusNonMigrated;
	
	@Value("${workbook.migration.status.migrated}")
	private String migrationStatusMigrated;
	
	@Value("${workbook.migration.status.cancelled}")
	private String migrationStatusCancelled;
	
	@Value("${workbook.migration.status.ongoing}")
	private String migrationStatusOngoing;
	
	@Value("${workbook.migration.status.failed}")
	private String migrationStatusFailed;
	
	@Autowired
	MigrationService migrationService;
	
	@Autowired
	OpportunityService opportunityService;
	
	@Autowired
	UploadDataService uploadDataService;
	
	@Autowired
	WorkbookAdapter workbookAdapter;
	
	private static final Logger log = LoggerFactory.getLogger(MigrationController.class);
	
	@RequestMapping(method = RequestMethod.POST, value = "/migration")
	public ResponseEntity<Object> migrateData(@RequestBody(required = true) Long workbookDataSourceId) {
		
		WorkbookDataSource workbookDataSource = uploadDataService.fetchWorkbookDataSource(workbookDataSourceId);
		
		uploadDataService.updateMigrationStatus(workbookDataSource, migrationStatusOngoing);
		String owner = workbookDataSource.getOwner();
		Integer businessUnitId = workbookDataSource.getBusinessUnit().getBusinessUnitId();
		
		List<OpportunityTnlRaw> opportunityTnlRaws = uploadDataService.fetchOpportunityTnlRaw(workbookDataSourceId);
		
		Workbook workbook = workbookAdapter.getWorkbook(opportunityTnlRaws);
		//delete opportunities uploaded from the same source
		List<Opportunity> opportunitiesToDelete = opportunityService.fetchOpportunitiesByWorkbookDataSourceId(workbookDataSourceId);
		for(Opportunity opportunity : opportunitiesToDelete) {
			opportunityService.deleteOpportunity(opportunity.getOpportunityId());
			log.debug("migration.. purging opportunity with id " + opportunity.getOpportunityId());
		}
		//insert opportunity entries
		List<Opportunity> opportunities = migrationService.saveTnlOpportunities(workbook, owner, businessUnitId);
		
		if(opportunities == null) {
			uploadDataService.updateMigrationStatus(workbookDataSource, migrationStatusFailed);
			return new ResponseEntity<>(new CustomError("migration failed"), HttpStatus.BAD_REQUEST);
		} else {
			uploadDataService.updateMigrationStatus(workbookDataSource, migrationStatusMigrated);
			return new ResponseEntity<>(opportunities, HttpStatus.OK);
		}
	}
	
}
