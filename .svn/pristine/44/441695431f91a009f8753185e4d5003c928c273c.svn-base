package com.pointwest.workforce.planner.controller;


import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.pointwest.workforce.planner.domain.CustomError;
import com.pointwest.workforce.planner.domain.OpportunityTnlRaw;
import com.pointwest.workforce.planner.domain.WorkbookDataSource;
import com.pointwest.workforce.planner.service.UploadDataService;


@RestController
public class WorkbookController {
	
	@Autowired
	UploadDataService uploadDataService;
	
	private static final Logger log = LoggerFactory.getLogger(WorkbookController.class);
	
	@RequestMapping(method=RequestMethod.GET, value="/workbook")
    public ResponseEntity<Object> fetchAllWorkbook() {
       return null;
    }
	
	@RequestMapping(method=RequestMethod.GET, value="/workbook/{workbookId}")
    public ResponseEntity<Object> fetchWorkbook() {
       return null;
    }
	
	@RequestMapping(method = RequestMethod.POST, value = "/gbook")
	public ResponseEntity<Object> saveGoogleWorkbook(
			@RequestBody(required = false) String url) {
		System.out.println(url);

		boolean isSaved = true;
		
		WorkbookDataSource workbookDataSource = uploadDataService.saveGoogleWorkbook(url);
		
		if (workbookDataSource == null) {
			isSaved = false;
//			TODO (1) Error Message, (2) Number of Successfully Validated Line Entries, 
//			(3) Number of Line Entries with Validation Errors, (4) Number of Validation Errors Encountered, 
//			(5) Link to view upload error report.
			
			return new ResponseEntity<>(new CustomError("Not saved"), HttpStatus.FAILED_DEPENDENCY);
		}else {
			isSaved = true;
			uploadDataService.extractGoogleWorkbook(workbookDataSource);
		}

		return new ResponseEntity<>(isSaved, HttpStatus.OK);
	}
	
	@RequestMapping(method=RequestMethod.GET, value="/workbook/tnl")
    public ResponseEntity<Object> fetchAllOpportunityTnlRaw() {
       List<OpportunityTnlRaw> opportunityTnlRaws = uploadDataService.fetchAllOpportunityTnlRaw();
       if(opportunityTnlRaws == null) {
    	   return new ResponseEntity<>(new CustomError("No list retrieved"), HttpStatus.NOT_FOUND);
       } else {
    	   return new ResponseEntity<>(opportunityTnlRaws, HttpStatus.OK);
       }
    }
	
	@RequestMapping(method = RequestMethod.POST, value = "/workbook/tnl")
	public ResponseEntity<Object> saveOpportunity(@RequestBody(required = true) List<OpportunityTnlRaw> opportunityTnlRaws) {
		
		List<OpportunityTnlRaw> savedOpportunityTnlRaws = null;
		try {
			savedOpportunityTnlRaws = uploadDataService.saveOpportunityTnlRaw(opportunityTnlRaws);
		} catch (Exception e) {
			return new ResponseEntity<>(new CustomError(e.getMessage()), HttpStatus.BAD_REQUEST);
		}
		
		if (savedOpportunityTnlRaws == null) {
			return new ResponseEntity<>(new CustomError("Incorrect inputs, not saved"), HttpStatus.BAD_REQUEST);
		} else {
			return new ResponseEntity<>(savedOpportunityTnlRaws, HttpStatus.OK);
		}
	}
	
}
