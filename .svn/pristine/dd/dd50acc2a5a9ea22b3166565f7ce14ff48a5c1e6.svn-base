package com.pointwest.workforce.planner.controller;

import java.util.Comparator;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.pointwest.workforce.planner.domain.CustomError;
import com.pointwest.workforce.planner.domain.OpportunityActivity;
import com.pointwest.workforce.planner.domain.ResourceSpecification;
import com.pointwest.workforce.planner.domain.Role;
import com.pointwest.workforce.planner.service.AccessService;
import com.pointwest.workforce.planner.service.OpportunityActivityService;
import com.pointwest.workforce.planner.service.OpportunityService;
import com.pointwest.workforce.planner.service.ResourceSpecificationService;

@RestController
public class ResourceSpecificationController {
	
	@Autowired
	ResourceSpecificationService resourceSpecificationService;
	
	//Sprint 3 overhaul
	@Autowired
	OpportunityService opportunityService;
	
	@Autowired
	OpportunityActivityService opportunityActivityService;
	
	@Autowired
	AccessService accessService;
	
	private static final Logger log = LoggerFactory.getLogger(ResourceSpecificationController.class);
	
	@RequestMapping(method=RequestMethod.GET, value="/resourcespecifications")
    public ResponseEntity<Object> fetchAllOpportunities() {
		List<ResourceSpecification> resourceSpecifications =resourceSpecificationService.fetchAllResourceSpecifications();
		if(resourceSpecifications == null || resourceSpecifications.isEmpty()) {
			return new ResponseEntity<>(new CustomError("No Resource Specifications retrieved"), HttpStatus.NOT_FOUND);
		} else {
			return new ResponseEntity<>(resourceSpecifications, HttpStatus.OK);
		}
    }
	
	@RequestMapping(method=RequestMethod.GET, value="/resourcespecifications/{resourceSpecificationId}")
    public ResponseEntity<Object> fetchResourceSpecification(@PathVariable Long resourceSpecificationId) {
		ResourceSpecification resourceSpecification = resourceSpecificationService.fetchResourceSpecification(resourceSpecificationId);
		if(resourceSpecification == null) {
			return new ResponseEntity<>(new CustomError("Resource Specification not found"), HttpStatus.NOT_FOUND);
		} else {
			return new ResponseEntity<>(resourceSpecification, HttpStatus.OK);
		}
    }
	

	@RequestMapping(method=RequestMethod.POST, value="/resourcespecifications")
    public ResponseEntity<Object> saveResourceSpecification(@RequestBody(required=false) ResourceSpecification resourceSpecification,
    		@RequestParam(required=false) String option, @RequestParam(required=false) Integer sequenceNo, @RequestParam(required=false) Long opportunityId) {
		// options -- all, this, succeeding
		//2nd level checker for editing permission
		String username = SecurityContextHolder.getContext().getAuthentication().getPrincipal().toString();
		try {
			if(!accessService.hasPermissionToEditOaId(resourceSpecification.getOpportunityActivityId(), username)) {
				return new ResponseEntity<>(new CustomError("Not allowed to edit this opportunity"), HttpStatus.FORBIDDEN);
			}
		} catch(Exception e) {
			return new ResponseEntity<>(new CustomError("Invalid inputs"), HttpStatus.BAD_REQUEST);
		}
		
		/*ResourceSpecification savedResourceSpecification = null;
		boolean isNew = false;
		if(resourceSpecification==null) {
			savedResourceSpecification = resourceSpecificationService.saveResourceSpecification(new ResourceSpecification());
			isNew = true;
		} else if(resourceSpecification.getResourceSpecificationId() == null) {
			savedResourceSpecification = resourceSpecificationService.saveResourceSpecification(resourceSpecification);
			isNew = true;
		} else {
			savedResourceSpecification = resourceSpecificationService.updateResourceSpecification(resourceSpecification, resourceSpecification.getResourceSpecificationId());
			isNew = false;
		}
		if(savedResourceSpecification==null) {
			return new ResponseEntity<>(new CustomError("Invalid inputs, not saved"), HttpStatus.BAD_REQUEST);
		} else {
			if(isNew) {
				return new ResponseEntity<>(savedResourceSpecification, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(savedResourceSpecification, HttpStatus.OK);
			}
		}*/
		//Sprint 3 overhaul
		List<OpportunityActivity> opportunityActivities = null;
		long opportunityActivityId = 0;
		int roleId = resourceSpecification.getRole().getRoleId();
		Role role = null;
		//bmab kept old to prevent issues
		if(option == null) {
			ResourceSpecification savedResourceSpecification = resourceSpecificationService.saveResourceSpecification(resourceSpecification);
			return new ResponseEntity<>(savedResourceSpecification, HttpStatus.CREATED);
		} else {
			option = option.toLowerCase().trim();
			if(option.equals("this")) {
				resourceSpecificationService.saveResourceSpecification(resourceSpecification);
			} else if(option.equals("succeeding")  && opportunityId != null && sequenceNo != null) {
				opportunityActivities = opportunityService.fetchOpportunity(opportunityId).getOpportunityActivities();
				for(OpportunityActivity opportunityActivity : opportunityActivities) {
					if(opportunityActivity.getSequenceNo() >= sequenceNo) {
						opportunityActivityId = opportunityActivity.getOpportunityActivityId();
						resourceSpecification = new ResourceSpecification();
						role = new Role();
						role.setRoleId(roleId);
						resourceSpecification.setRole(role);
						resourceSpecification.setOpportunityActivityId(opportunityActivityId);
						resourceSpecificationService.saveResourceSpecification(resourceSpecification);	
					}
				}
			} else if(option.equals("all") && opportunityId != null) {
				opportunityActivities = opportunityService.fetchOpportunity(opportunityId).getOpportunityActivities();
				for(OpportunityActivity opportunityActivity : opportunityActivities) {
					opportunityActivityId = opportunityActivity.getOpportunityActivityId();
					resourceSpecification = new ResourceSpecification();
					role = new Role();
					role.setRoleId(roleId);
					resourceSpecification.setRole(role);
					resourceSpecification.setOpportunityActivityId(opportunityActivityId);
					resourceSpecificationService.saveResourceSpecification(resourceSpecification);	
				}
			} else {
				return new ResponseEntity<>(new CustomError("Invalid inputs"), HttpStatus.BAD_REQUEST);
			}
		}
		
		opportunityActivities = opportunityService.fetchOpportunity(opportunityId).getOpportunityActivities();
		opportunityActivities.sort(Comparator.comparingInt(OpportunityActivity::getSequenceNo));
		return new ResponseEntity<>(opportunityActivities, HttpStatus.CREATED);
		
    }
	
	@RequestMapping(method=RequestMethod.PUT, value="/resourcespecifications/{resourceSpecificationId}")
    public ResponseEntity<Object> updateResourceSpecification(@RequestBody(required=true) ResourceSpecification resourceSpecification, @PathVariable Long resourceSpecificationId) {
		
		//2nd level checker for editing permission
		String username = SecurityContextHolder.getContext().getAuthentication().getPrincipal().toString();
		try {
			if(!accessService.hasPermissionToEditRsId(resourceSpecificationId, username)) {
				return new ResponseEntity<>(new CustomError("Not allowed to edit this opportunity"), HttpStatus.FORBIDDEN);
			}
		} catch(Exception e) {
			return new ResponseEntity<>(new CustomError("Invalid inputs"), HttpStatus.BAD_REQUEST);
		}
		
		ResourceSpecification savedResourceSpecification = null;
		Long idInRequestBody = resourceSpecification.getResourceSpecificationId();
		if ( (idInRequestBody != null) && ((idInRequestBody.compareTo(resourceSpecificationId)) != 0) ) {
			//unmatched object and url id's
			return new ResponseEntity<>(new CustomError("Unmatched ID's in RequestBody and URL"), HttpStatus.BAD_REQUEST);
		}
		savedResourceSpecification = resourceSpecificationService.updateResourceSpecification(resourceSpecification, resourceSpecificationId);
		if(savedResourceSpecification==null) {
			return new ResponseEntity<>(resourceSpecification, HttpStatus.BAD_REQUEST);
		} else {
			return new ResponseEntity<>(savedResourceSpecification, HttpStatus.OK);
		}
    }
	
	@RequestMapping(method=RequestMethod.DELETE, value="/resourcespecifications/{resourceSpecificationId}")
    public ResponseEntity<Object> deleteResourceSpecification(@PathVariable Long resourceSpecificationId) {
		log.debug("deleting resource id " + resourceSpecificationId);
		//2nd level checker for editing permission
		String username = SecurityContextHolder.getContext().getAuthentication().getPrincipal().toString();
		try {
			if(!accessService.hasPermissionToEditRsId(resourceSpecificationId, username)) {
				return new ResponseEntity<>(new CustomError("Not allowed to edit this opportunity"), HttpStatus.FORBIDDEN);
			}
		} catch(Exception e) {
			return new ResponseEntity<>(new CustomError("Invalid inputs"), HttpStatus.BAD_REQUEST);
		}
		//Sprint 3 hardening changes
		OpportunityActivity curOpportunityActivity = opportunityActivityService.fetchOpportunityActivityOfResourceSpecificationId(resourceSpecificationId);
		Long opportunityActivityId = curOpportunityActivity.getOpportunityActivityId();
		int deleteCount = resourceSpecificationService.deleteResourceSpecification(resourceSpecificationId);
		if(deleteCount > 0) {
			//Sprint 3 hardening changes
			/*List<OpportunityActivity> opportunityActivities = opportunityService.fetchOpportunity(opportunityId).getOpportunityActivities();
			opportunityActivities.sort(Comparator.comparingInt(OpportunityActivity::getSequenceNo));
			return new ResponseEntity<>(opportunityActivities, HttpStatus.OK);*/
			OpportunityActivity opportunityActivity = opportunityActivityService.fetchOpportunityActivity(opportunityActivityId);
			log.debug("resource size of op act id " + opportunityActivityId + " " + opportunityActivity.getResourceSpecificationList().size());
			if(opportunityActivity.getResourceSpecificationList().size() == 0) {
				opportunityActivity.setActivityStartDate(null);
				opportunityActivity.setDurationInWeeks(null);
				opportunityActivity = opportunityActivityService.updateOpportunityActivity(opportunityActivity, opportunityActivity.getOpportunityActivityId());
			} else {
				opportunityActivityService.updateOpportunityActivityDates(opportunityActivityId);
			}
			return new ResponseEntity<>(opportunityActivity, HttpStatus.OK);
		} else {
			return new ResponseEntity<>(deleteCount, HttpStatus.BAD_REQUEST);
		}
    }
	
	
}
